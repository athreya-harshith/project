//project progess
1 -> bcrypt the password
2 -> create of  jwt during login or signup
3 -> storing jwt in session 
4 -> use stored token for verification

 -------- word cases ----------------
 table (relation) = snake_case
 attribute = camelCase



---------->   PROJECT INFO   <---------------
jwt is inside controller inside authentication
mail is inside controller inside authentication


--------------->DataBase Connectivity <------------------
DataBase is configured in dbConfig file


------------------->Session <----------------
Express-session - 
            an HTTP server-side framework used to create and manage a session middleware

Cookie-parser -
           used to parse cookie header to store data on the browser
            whenever a session is established on the server-side.

------------> ABOUT SERVER   <------------------
listen() :
          function is used to bind and listen the connections on the specified host and port.

In cookie httpOnly - helps to disable the cookie on user side javascript
user can't access the cookie using document.cookie

In cookie secure - helps cookie to work only on https website


Middle ware - to avoid csrf attack we r using csrf protection technique.
 Cross-Site Request Forgery (CSRF) is an attack that forces 
 authenticated users to submit a request to a Web application against 
 which they are currently authenticated. CSRF attacks exploit the trust
  a Web application has in an authenticated user.



Session middleware

session (resave) - Forces the session to be saved back to the session store, 
even if the session was never modified during the request.
 Depending on your store this may be necessary, but it can also
create race conditions where a client makes two parallel requests
to your server and changes made to the session in one request may
get overwritten when the other request ends, even if it made no
changes (this behavior also depends on what store you're using).

session (saveUninitialized) - Forces a session that is "uninitialized" to be saved to the store.
 A session is uninitialized when it is new but not modified.
 Choosing false is useful for implementing login sessions,
  reducing server storage usage, or complying with laws that 
  require permission before setting a cookie. Choosing false 
  will also help with race conditions where a client makes multiple 
  parallel requests without a session.




  Sequelize is a Node package that carries out Object Relational Mapping (ORM)
   between your server or your back-end code and a SQL database (MySQL,



   ----------------------> Cookie <-------------------
   cookie stores the jwt token as well cart product id

   